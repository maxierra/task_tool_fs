<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Generar Tablas desde Textarea</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      .table-responsive {
        max-height: 100vh;
        overflow-x: auto;
      }

      table {
        margin-top: 20px;
        width: 100%;
        border-collapse: collapse;
      }

      th {
        background-color: #007bff !important; /* Fondo azul */
        color: white !important; /* Texto blanco */
        padding: 10px;
      }

      td {
        text-align: left;
        padding: 10px; /* Aumentar el padding para mayor espacio */
        border: 1px solid #007bff;
        white-space: nowrap; /* Mantiene el contenido en una línea */
        overflow: hidden;
        max-height: 60px; /* Aumentar la altura máxima */
        max-width: 200px; /* Aumentar el ancho máximo */
        text-overflow: ellipsis;
        cursor: pointer;
        transition: max-height 0.2s ease-in-out, max-width 0.2s ease-in-out;
      }

      td.expanded {
        white-space: normal !important; /* Permitir múltiples líneas */
        max-height: none !important; /* Sin límite en la altura */
        max-width: none !important; /* Sin límite en el ancho */
        overflow: visible !important; /* Mostrar todo el contenido */
    }

      .case-container {
        border: 1px solid #007bff;
        border-radius: 5px;
        margin: 20px 0;
        padding: 10px;
      }

      .case-title {
        font-weight: bold;
        margin-bottom: 5px;
      }

      .table-title {
        margin-bottom: 10px;
        font-weight: bold;
      }

      .subtable {
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <%- include('navbar') %>
    <div class="container mt-4">
      <h2>Pegar Información para Crear Tablas</h2>
      <textarea
        id="dataInput"
        class="form-control mb-3"
        rows="10"
        placeholder="Pega tu información aquí..."
      ></textarea>
      <button class="btn btn-primary" onclick="generateTables()">
        Generar Tablas
      </button>
      <button class="btn btn-success" onclick="downloadReport()">
        Descargar Reporte HTML
      </button>

      <h2 class="mt-4">Evidencia de Anulaciones / Confirmaciones Manual</h2>
      <textarea
        id="anulacionesInput"
        class="form-control mb-3"
        rows="10"
        placeholder="Pega tu información aquí..."
      ></textarea>
      <button class="btn btn-primary" onclick="generateAnulacionesTable()">
        Generar Tabla de Anulaciones
      </button>

      <div class="table-responsive mt-4" id="containerTables"></div>
      <h1 class="mt-4">Evidencia de Anulaciones / Confirmaciones Manual</h1>
      <div class="table-responsive mt-4" id="anulacionesTable"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      function generateTables() {
        const data = document.getElementById("dataInput").value;
        const containerTables = document.getElementById("containerTables");
      
        containerTables.innerHTML = "";
      
        if (!data.trim()) {
          alert("Por favor, ingresa algún dato.");
          return;
        }
      
        const rows = data.split("\n").filter((row) => row.trim());
      
        const headerGroups = [
          [
            "PROCESADA", "MENSAJE", "TIPOAUTORIZACION", "OBSERVACION", "Bin", "CuentaExterna",
            "MontoImpactado", "FeeMambu", "MonedaOrigen", "visaTID", "FILENAME", "FILEPROCEFECHA",
            "ROWINFILE", "DE3", "DE4", "DE6", "DE12", "DE24", "DE25", "DE38", "DE43", "DE48",
            "DE49", "DE51", "DE63", "AUTOVISATID", "CUPON", "MOVIMTIPO", "CTA_INFI", "AUTOID",
            "AUTOCODI", "AUTOFECHA", "CONSUAUTOCODI", "CONSUFECHA", "CONSUMIPOR", "AUTOIMPOR",
            "ORIGEN_", "DIFERENCIA", "A_MAMBU", "RELA_OK", "ONL_OK", "STATUSMAMBU"
          ],
          [
            "Cuenta", "Adicional", "Número Tarjeta", "Fecha", "Importe", "Importe Confirmado",
            "Internacional", "Importe Original", "Moneda Original", "Plan", "Cuotas",
            "Código Autorización", "Número Comercio", "Estado", "Fecha Estado", "Relacionada",
            "Nro.Cupón", "Origen", "Rechazo", "ICA", "MCC", "TCC", "Regla Fraude", "Modo Entrada",
            "Terminal POS", "Stand-In", "Id Autorización", "Estado de la Autorización del POS",
            "Id Transaccion - Marca", "MAMBULOGID", "RECALLID"
          ],
          [
            "ERRORCODE", "ERRORSOURCE", "ERRORREASON", "REQUESTMESSAGECOMPLETE", "RESULTMESSAGECOMPLETE"
          ]
        ];
      
        const allHeaders = headerGroups.flat();
      
        let chileCases = [];
        let peruCases = [];
      
        // Separar los casos por BIN
        rows.forEach((row) => {
          const rowData = row.split("\t");
          const binIndex = allHeaders.indexOf("Bin");
          const binValue = rowData[binIndex] || "";
      
          if (binValue === "555505") {
            chileCases.push(rowData);
          } else if (binValue === "523510") {
            peruCases.push(rowData);
          }
        });
      
        // Función para agrupar por CUENTAEXTERNA y ordenar por visaTID
        const groupAndSortCases = (cases) => {
          const cuentaExternaIndex = allHeaders.indexOf("CuentaExterna");
          const visaTIDIndex = allHeaders.indexOf("visaTID");
      
          // Agrupar por CUENTAEXTERNA
          let groupedCases = cases.reduce((groups, rowData) => {
            const cuentaExterna = rowData[cuentaExternaIndex] || "SIN CUENTAEXTERNA";
            if (!groups[cuentaExterna]) {
              groups[cuentaExterna] = [];
            }
            groups[cuentaExterna].push(rowData);
            return groups;
          }, {});
      
          // Ordenar por CUENTAEXTERNA
          const sortedGroups = Object.keys(groupedCases).sort().reduce((sorted, key) => {
            sorted[key] = groupedCases[key];
            return sorted;
          }, {});
      
          // Dentro de cada grupo, ordenar por visaTID
          Object.keys(sortedGroups).forEach((key) => {
            sortedGroups[key].sort((a, b) => {
              const visaTIDA = a[visaTIDIndex] || "";
              const visaTIDB = b[visaTIDIndex] || "";
              return visaTIDA.localeCompare(visaTIDB);
            });
          });
      
          // Convertir de objeto a array de filas ordenadas
          return Object.values(sortedGroups).flat();
        };
      
        chileCases = groupAndSortCases(chileCases);
        peruCases = groupAndSortCases(peruCases);
      
        const updateSummary = (caseRow, caseContainer) => {
          const cuentaExternaIndex = allHeaders.indexOf("CuentaExterna");
          const montoImpactadoIndex = allHeaders.indexOf("MontoImpactado");
          const mensajeIndex = allHeaders.indexOf("MENSAJE");
          const origenIndex = allHeaders.indexOf("Origen");
        
          const cuentaExterna = caseContainer.querySelector(".cuentaExterna");
          const montoImpactado = caseContainer.querySelector(".montoImpactado");
          const mensaje = caseContainer.querySelector(".mensaje");
          const origen = caseContainer.querySelector(".origen");
        
          cuentaExterna.textContent = `CUENTAEXTERNA: ${caseRow[cuentaExternaIndex] || ""}`;
          montoImpactado.textContent = `Monto: ${caseRow[montoImpactadoIndex] || ""}`;
          mensaje.textContent = `MENSAJE: ${caseRow[mensajeIndex] || ""}`;
          origen.textContent = `ORIGEN: ${caseRow[origenIndex] || ""}`;
        };
        
      
        const createCaseTable = (caseRow, caseIndex, title) => {
          const caseContainer = document.createElement("div");
          caseContainer.classList.add("case-container");
      
          const caseTitle = document.createElement("div");
          caseTitle.classList.add("case-title");
          caseTitle.textContent = `${title} ${caseIndex + 1}`;
          caseContainer.appendChild(caseTitle);
      
          const extraContainer = document.createElement("div");
          extraContainer.classList.add("mt-3");
      
          const summaryFields = ["cuentaExterna", "montoImpactado", "mensaje", "origen", "procesada", "tipoAutorizacion", "mcc"];
          summaryFields.forEach(field => {
            const element = document.createElement("div");
            element.classList.add(field);
            extraContainer.appendChild(element);
          });
      
          caseContainer.appendChild(extraContainer);
      
          headerGroups.forEach((group, groupIndex) => {
            const subtable = document.createElement("div");
            subtable.classList.add("subtable", "table-responsive");
      
            const tableTitle = document.createElement("div");
            tableTitle.classList.add("table-title");
            tableTitle.textContent = `Tabla ${groupIndex + 1}`;
            subtable.appendChild(tableTitle);
      
            const table = document.createElement("table");
            table.classList.add(`table-${groupIndex + 1}`, "table");
            const thead = document.createElement("thead");
            const tbody = document.createElement("tbody");
      
            const headerRow = document.createElement("tr");
            group.forEach((header) => {
              const th = document.createElement("th");
              th.textContent = header;
              headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
      
            const tr = document.createElement("tr");
            group.forEach((header) => {
              const td = document.createElement("td");
              const dataIndex = allHeaders.indexOf(header);
              td.textContent = caseRow[dataIndex] || "";
      
              td.contentEditable = true;
              td.style.whiteSpace = "nowrap";
              td.style.overflow = "hidden";
              td.style.maxHeight = "60px";
              td.style.maxWidth = "200px";
              td.style.textOverflow = "ellipsis";
              td.style.cursor = "pointer";
      
              td.addEventListener("click", () => {
                if (td.style.whiteSpace === "nowrap") {
                  td.style.whiteSpace = "normal";
                  td.style.maxHeight = "none";
                  td.style.maxWidth = "none";
                  td.style.overflow = "visible";
                } else {
                  td.style.whiteSpace = "nowrap";
                  td.style.maxHeight = "60px";
                  td.style.maxWidth = "200px";
                  td.style.overflow = "hidden";
                }
              });
      
              tr.appendChild(td);
            });
            tbody.appendChild(tr);
      
            table.appendChild(thead);
            table.appendChild(tbody);
            subtable.appendChild(table);
            caseContainer.appendChild(subtable);
          });
      
          updateSummary(caseRow, caseContainer);
      
          return caseContainer;
        };
      
        // Generar tablas para Chile
        chileCases.forEach((chileCase, caseIndex) => {
          const caseContainer = createCaseTable(chileCase, caseIndex, "Caso Chile");
          containerTables.appendChild(caseContainer);
        });
      
        // Generar tablas para Perú
        peruCases.forEach((peruCase, caseIndex) => {
          const caseContainer = createCaseTable(peruCase, caseIndex, "Caso Perú");
          containerTables.appendChild(caseContainer);
        });
      }
        
     
     
      function generateAnulacionesTable() {
        const data = document.getElementById("anulacionesInput").value;
        const anulacionesTable = document.getElementById("anulacionesTable");
    
        anulacionesTable.innerHTML = ""; // Limpiar contenido anterior
    
        if (!data.trim()) {
            alert("Por favor, ingresa algún dato.");
            return;
        }
    
        const rows = data.split("\n").filter((row) => row.trim());
    
        const headers = [
            "TipoAutorizacion",
            "Hora_Autorizacion",
            "Estado",
            "Hora_Intervencion",
            "Usuario",
            "AUTOCODI",
            "PAN",
            "Cta.Infinitus",
            "Cuenta.Mambu",
            "CardReferenceToken",
            "MontoLocal",
            "MonedaLocal",
            "MontoOrigen",
            "MonedaOrigen",
            "Comercio",
            "PaisComercio",
            "CiudadComercio",
            "MCC",
            "VISA_TID",
            "Internacional",
            "RTA_MAMBU",
        ];
    
        // Crear un contenedor para el título y la tabla
        const tableContainer = document.createElement("div");
    
        // Crear el título de la tabla
        const tableTitle = document.createElement("div");
        tableTitle.classList.add("table-title");
        tableTitle.textContent = "Tabla de evidencia de anulaciones / confirmaciones manual "; // Cambia este texto según lo que necesites
        tableContainer.appendChild(tableTitle);
    
        // Crear la tabla
        const table = document.createElement("table");
        table.classList.add("table");
        const thead = document.createElement("thead");
        const tbody = document.createElement("tbody");
    
        const headerRow = document.createElement("tr");
        headers.forEach((header) => {
            const th = document.createElement("th");
            th.textContent = header;
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
    
        rows.forEach((row) => {
            const rowData = row.split("\t");
            const tr = document.createElement("tr");
    
            rowData.forEach((cell, index) => {
                const td = document.createElement("td");
    
                // Verificar si es la columna "RTA_MAMBU" (índice 20) y si está vacía o nula
                if (index === 20 && (!cell || cell.trim() === "")) {
                    td.textContent = "N/A";  // Asignar "N/A" si está vacío
                } else {
                    td.textContent = cell;
                }
    
                tr.appendChild(td);
            });
    
            tbody.appendChild(tr);
        });
    
        table.appendChild(thead);
        table.appendChild(tbody);
    
        // Agregar la tabla al contenedor
        tableContainer.appendChild(table);
    
        // Agregar el contenedor de la tabla de anulaciones al DOM
        anulacionesTable.appendChild(tableContainer);
    }
    

    function downloadReport() {
      const containerTables = document.getElementById("containerTables");
      const anulacionesTable = document.getElementById("anulacionesTable");
      const reportContent = containerTables.innerHTML + anulacionesTable.innerHTML;
  
      // Crear un nuevo contenedor temporal para modificar el contenido
      const tempContainer = document.createElement('div');
      tempContainer.innerHTML = reportContent;
  
      // Definir las columnas a ocultar para cada tipo de tabla
      const headersToHide = {
          'table-1': [
              "PROCESADA", "MENSAJE", "TIPOAUTORIZACION", "OBSERVACION", "FILENAME",
              "DE12", "DE48", "MOVIMID", "MOVIMTIPO", "ROWINFILE", "FeeMambu", "MAMBULOGID", "RECALLID",
          ],
          'table-2': [
              "AUTOID", "AUTOCODI", "TIPOAUTO", "CONSUAUTOCODI", "FORZADA_MAMBU",
              "A_MAMBU", "RELA_OK", "ONL_OK", "AUTOFORZADA", "STATUSMAMBU",
              "MAMBULOGID", "RECALLID", "Bin", "CuentaExterna", "MontoImpactado",
              "FEEMAMBU", "MonedaOrigen", "visaTID", "PROCESADA", "MENSAJE", "TIPOAUTORIZACION", "OBSERVACION", "FeeMambu", "FILENAME", "ROWINFILE",
          ],
          'table-3': [
              "ERRORCODE", "ERRORSOURCE", "ERRORREASON" // columnas a ocultar en la tercera tabla
          ]
      };
  
      // Iterar sobre todas las tablas y ocultar las columnas específicas
      const tables = tempContainer.querySelectorAll('table');
      tables.forEach((table, index) => {
          let tableClass;
  
          if (index === 0) {
              tableClass = 'table-2';
          } else if (index === 1) {
              tableClass = 'table-1';
          } else if (index === 2) {
              tableClass = 'table-3';
          }
  
          const headers = headersToHide[tableClass];
  
          if (headers) {
              const headerCells = table.querySelectorAll('th');
              const rows = table.querySelectorAll('tr');
  
              headerCells.forEach((cell, index) => {
                  if (headers.includes(cell.innerText.trim())) {
                      cell.style.display = 'none';
                      rows.forEach(row => {
                          const cells = row.querySelectorAll('td');
                          if (cells[index]) {
                              cells[index].style.display = 'none';
                          }
                      });
                  }
              });
          }
  
          if (index === 2) {
              table.classList.add('table-3');
          }
      });
  
      // Obtener la fecha actual en el formato YYYYMMDD
      const currentDate = new Date();
      const formattedDate = currentDate.toISOString().split('T')[0].replace(/-/g, '');
  
      // Obtener la fecha actual en un formato más amigable
      const formattedTitleDate = currentDate.toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
      });
  
      // Incluir el CSS y el contenido del reporte
      const fullReport =
          `<!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Reporte Generado</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>
                  body {
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                      margin: 0;
                      padding: 20px;
                      min-height: 100vh;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      background-color: rgba(255, 255, 255, 0.9);
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                      padding: 30px;
                      position: relative;
                  }
                  h1 {
                      color: #2c3e50;
                      text-align: center;
                      margin-bottom: 30px;
                      font-size: 2.5em;
                      text-transform: uppercase;
                      letter-spacing: 2px;
                  }
                  .table-responsive {
                      max-height: 80vh;
                      overflow-x: auto;
                      margin-bottom: 30px;
                      border-radius: 10px;
                      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
                  }
                  table {
                      width: 100%;
                      border-collapse: collapse;
                      font-size: 10px;
                      background-color: white;
                  }
                  th, td {
                      padding: 8px 10px;
                      text-align: left;
                      vertical-align: middle;
                      border: 1px solid #e0e0e0;
                  }
                  th {
                      background-color: #007bff !important;
                      color: white !important;
                      font-weight: bold !important;
                      letter-spacing: 1px !important;
                      font-size: 10px !important;
                  }
                  tr:nth-child(even) {
                      background-color: #f8f9fa;
                  }
                  tr:hover {
                      background-color: #e9ecef;
                      transition: background-color 0.3s ease;
                  }
                  td {
                      max-width: 300px;
                      overflow: hidden;
                      text-overflow: ellipsis;
                      white-space: nowrap;
                  }
                  td.expanded {
                      white-space: normal;
                      max-width: none;
                  }
                  .case-container {
                      background-color: #ffffff;
                      border: 1px solid #e0e0e0;
                      border-radius: 10px;
                      margin: 20px 0;
                      padding: 20px;
                      transition: all 0.3s ease;
                  }
                  .case-container:hover {
                      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                      transform: translateY(-2px);
                  }
                  .table-title {
                      color: #34495e;
                      font-size: 1.1em;
                      margin-bottom: 15px;
                      font-weight: 600;
                  }
                  .subtable {
                      margin-bottom: 30px;
                  }
                  @media (max-width: 768px) {
                      .container {
                          padding: 15px;
                      }
                      table {
                          font-size: 12px;
                      }
                      th, td {
                          padding: 8px 10px;
                      }
                  }
                  .table-3 td {
                      white-space: normal !important;
                      line-height: 1.5 !important;
                      height: auto !important;
                      word-wrap: break-word !important;
                      padding: 10px !important;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h3>Casos detectados en proceso de IPM - ${formattedTitleDate}</h3>
                  <div class="table-responsive">
                      ${tempContainer.innerHTML}
                  </div>
              </div>
          </body>
          </html>`;
  
      // Crear un blob y un enlace para descargar el archivo
      const blob = new Blob([fullReport], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `reporte_ipm_${formattedDate}.html`;
      a.click();
      URL.revokeObjectURL(url);
  }
  
    </script>
  </body>
</html>
